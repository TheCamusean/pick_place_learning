// Generated by gencpp from file grasping_gym_actions/makeEnvStepResponse.msg
// DO NOT EDIT!


#ifndef GRASPING_GYM_ACTIONS_MESSAGE_MAKEENVSTEPRESPONSE_H
#define GRASPING_GYM_ACTIONS_MESSAGE_MAKEENVSTEPRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace grasping_gym_actions
{
template <class ContainerAllocator>
struct makeEnvStepResponse_
{
  typedef makeEnvStepResponse_<ContainerAllocator> Type;

  makeEnvStepResponse_()
    : success(false)
    , message()
    , next_state()
    , reward(0.0)
    , done(false)  {
    }
  makeEnvStepResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , message(_alloc)
    , next_state(_alloc)
    , reward(0.0)
    , done(false)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _next_state_type;
  _next_state_type next_state;

   typedef float _reward_type;
  _reward_type reward;

   typedef uint8_t _done_type;
  _done_type done;





  typedef boost::shared_ptr< ::grasping_gym_actions::makeEnvStepResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grasping_gym_actions::makeEnvStepResponse_<ContainerAllocator> const> ConstPtr;

}; // struct makeEnvStepResponse_

typedef ::grasping_gym_actions::makeEnvStepResponse_<std::allocator<void> > makeEnvStepResponse;

typedef boost::shared_ptr< ::grasping_gym_actions::makeEnvStepResponse > makeEnvStepResponsePtr;
typedef boost::shared_ptr< ::grasping_gym_actions::makeEnvStepResponse const> makeEnvStepResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::grasping_gym_actions::makeEnvStepResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::grasping_gym_actions::makeEnvStepResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace grasping_gym_actions

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::grasping_gym_actions::makeEnvStepResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grasping_gym_actions::makeEnvStepResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grasping_gym_actions::makeEnvStepResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grasping_gym_actions::makeEnvStepResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasping_gym_actions::makeEnvStepResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasping_gym_actions::makeEnvStepResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::grasping_gym_actions::makeEnvStepResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e072d6ea85c979393a2a96f8d862c21b";
  }

  static const char* value(const ::grasping_gym_actions::makeEnvStepResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe072d6ea85c97939ULL;
  static const uint64_t static_value2 = 0x3a2a96f8d862c21bULL;
};

template<class ContainerAllocator>
struct DataType< ::grasping_gym_actions::makeEnvStepResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grasping_gym_actions/makeEnvStepResponse";
  }

  static const char* value(const ::grasping_gym_actions::makeEnvStepResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::grasping_gym_actions::makeEnvStepResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n\
string message\n\
float32[] next_state\n\
float32 reward\n\
bool done\n\
\n\
\n\
";
  }

  static const char* value(const ::grasping_gym_actions::makeEnvStepResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::grasping_gym_actions::makeEnvStepResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.message);
      stream.next(m.next_state);
      stream.next(m.reward);
      stream.next(m.done);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct makeEnvStepResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::grasping_gym_actions::makeEnvStepResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::grasping_gym_actions::makeEnvStepResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
    s << indent << "next_state[]" << std::endl;
    for (size_t i = 0; i < v.next_state.size(); ++i)
    {
      s << indent << "  next_state[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.next_state[i]);
    }
    s << indent << "reward: ";
    Printer<float>::stream(s, indent + "  ", v.reward);
    s << indent << "done: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.done);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASPING_GYM_ACTIONS_MESSAGE_MAKEENVSTEPRESPONSE_H
