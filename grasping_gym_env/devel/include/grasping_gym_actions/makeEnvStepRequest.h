// Generated by gencpp from file grasping_gym_actions/makeEnvStepRequest.msg
// DO NOT EDIT!


#ifndef GRASPING_GYM_ACTIONS_MESSAGE_MAKEENVSTEPREQUEST_H
#define GRASPING_GYM_ACTIONS_MESSAGE_MAKEENVSTEPREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace grasping_gym_actions
{
template <class ContainerAllocator>
struct makeEnvStepRequest_
{
  typedef makeEnvStepRequest_<ContainerAllocator> Type;

  makeEnvStepRequest_()
    : action()
    , step_n(0)  {
    }
  makeEnvStepRequest_(const ContainerAllocator& _alloc)
    : action(_alloc)
    , step_n(0)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _action_type;
  _action_type action;

   typedef int32_t _step_n_type;
  _step_n_type step_n;





  typedef boost::shared_ptr< ::grasping_gym_actions::makeEnvStepRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grasping_gym_actions::makeEnvStepRequest_<ContainerAllocator> const> ConstPtr;

}; // struct makeEnvStepRequest_

typedef ::grasping_gym_actions::makeEnvStepRequest_<std::allocator<void> > makeEnvStepRequest;

typedef boost::shared_ptr< ::grasping_gym_actions::makeEnvStepRequest > makeEnvStepRequestPtr;
typedef boost::shared_ptr< ::grasping_gym_actions::makeEnvStepRequest const> makeEnvStepRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::grasping_gym_actions::makeEnvStepRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::grasping_gym_actions::makeEnvStepRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace grasping_gym_actions

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::grasping_gym_actions::makeEnvStepRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grasping_gym_actions::makeEnvStepRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grasping_gym_actions::makeEnvStepRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grasping_gym_actions::makeEnvStepRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasping_gym_actions::makeEnvStepRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasping_gym_actions::makeEnvStepRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::grasping_gym_actions::makeEnvStepRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e73a80885bb50ae7505618dd3d48bcbf";
  }

  static const char* value(const ::grasping_gym_actions::makeEnvStepRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe73a80885bb50ae7ULL;
  static const uint64_t static_value2 = 0x505618dd3d48bcbfULL;
};

template<class ContainerAllocator>
struct DataType< ::grasping_gym_actions::makeEnvStepRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grasping_gym_actions/makeEnvStepRequest";
  }

  static const char* value(const ::grasping_gym_actions::makeEnvStepRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::grasping_gym_actions::makeEnvStepRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] action\n\
int32 step_n\n\
";
  }

  static const char* value(const ::grasping_gym_actions::makeEnvStepRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::grasping_gym_actions::makeEnvStepRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.step_n);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct makeEnvStepRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::grasping_gym_actions::makeEnvStepRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::grasping_gym_actions::makeEnvStepRequest_<ContainerAllocator>& v)
  {
    s << indent << "action[]" << std::endl;
    for (size_t i = 0; i < v.action.size(); ++i)
    {
      s << indent << "  action[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.action[i]);
    }
    s << indent << "step_n: ";
    Printer<int32_t>::stream(s, indent + "  ", v.step_n);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASPING_GYM_ACTIONS_MESSAGE_MAKEENVSTEPREQUEST_H
